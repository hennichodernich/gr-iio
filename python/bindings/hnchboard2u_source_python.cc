/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(hnchboard2u_source.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(499e31bc9862a826d56ee7e0bc2636e9)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <iio/hnchboard2u_source.h>
// pydoc.h is automatically generated in the build directory
#include <hnchboard2u_source_pydoc.h>

void bind_hnchboard2u_source(py::module& m)
{

    using hnchboard2u_source    = ::gr::iio::hnchboard2u_source;
    using hnchboard2u_source_f32c    = ::gr::iio::hnchboard2u_source_f32c;


    py::class_<hnchboard2u_source, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<hnchboard2u_source>>(m, "hnchboard2u_source", D(hnchboard2u_source))

        .def(py::init(&hnchboard2u_source::make),
           py::arg("uri"),
           py::arg("samplerate"),
           py::arg("lo_freq"),
           py::arg("gain_value"),
           py::arg("buffer_size"),
           D(hnchboard2u_source,make)
        )
        .def("set_params",&hnchboard2u_source::set_params,       
            py::arg("samplerate"),
            py::arg("lo_freq"),
            py::arg("gain_value"),
            D(hnchboard2u_source,set_params)
        )
        ;


    py::class_<hnchboard2u_source_f32c, gr::hier_block2,
        std::shared_ptr<hnchboard2u_source_f32c>>(m, "hnchboard2u_source_f32c", D(hnchboard2u_source_f32c))

        .def(py::init(&hnchboard2u_source_f32c::make),
           py::arg("uri"),
           py::arg("samplerate"),
           py::arg("lo_freq"),
           py::arg("gain_value"),
           py::arg("buffer_size"),
           D(hnchboard2u_source_f32c,make)
        )
        




        
        .def("set_params",&hnchboard2u_source_f32c::set_params,       
            py::arg("samplerate"),
            py::arg("lo_freq"),
            py::arg("gain_value"),
            D(hnchboard2u_source_f32c,set_params)
        )

        ;




}








